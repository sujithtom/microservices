server.port=7000
server.error.include-message=always
app.product-service.host=localhost
app.product-service.port=7001
app.recommendation-service.host=localhost
app.recommendation-service.port=7002
app.review-service.host=localhost
app.review-service.port=7003
logging.level.root=INFO
logging.level.com.tomji.core=DEBUG


api.common.version=1.0.0
api.common.title=Product Composite API
api.common.description=Description
api.common.termsOfServiceUrl=N/A
api.common.license=License
api.common.licenseUrl=N/A
api.common.contact.name=ContactName
api.common.contact.url=URL
api.common.contact.email=EMAIL


product-composite.get-composite-product.description=Returns a composite view of the specified product id
product-composite.get-composite-product.notes=|\
  # Normal response\
  If the requested product id is found the method will return information regarding:\
  1. Product information\
  1. Reviews\
  1. Recommendations\
  1. Service Addresses\
  (technical information regarding the addresses of the microservices that created the response)\
  # Expected partial and error responses\
  1. If no product information is found, a <b>404 - Not Found</b> error will be returned\
  1. In no recommendations or reviews are found for a product, a partial response will be returned

product-composite.create-composite-product.description= Creates a composite product
product-composite.create-composite-product.note= |\
# Normal response\
The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.\
\
# Expected error responses\
1. If a product with the same productId as specified in the posted information already exists,\
an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned\

product-composite.delete-composite-product.description= Deletes a product composite
product-composite.delete-composite-product.notes= |\
# Normal response\
Entities for product information, recommendations and reviews related to the specificed productId will be deleted.\
The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.\
This means that a delete request of a non existing product will return <b>200 Ok</b>.
